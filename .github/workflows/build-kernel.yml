name: "Kernel Builds"
on:
  watch:
      types: [started]
  workflow_dispatch:

jobs: 
  shasoc-t:
    name: "Build ShasOC for Android 13 (R)"
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - uses: actions/checkout@v3
    - name: Environment setup
      run: |
        echo "BUILD_TIME=$(TZ=Europe/Kyiv date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
    - name: Setup toolchain
      run: |
        mkdir clang
        git clone https://github.com/kdrag0n/proton-clang.git -b master --depth=1 clang
    - name: Clone kernel source code
      run: |
        cd $GITHUB_WORKSPACE/
        git clone https://github.com/Shas45558/oc_a13r --branch a13r --depth=1 shasoc
    - name: Apply KernelSU patch for 4.14 kernels
      run: |
        git clone https://github.com/melamit/xiaomi-merlin-weekly-action.git $GITHUB_WORKSPACE/action
        cd $GITHUB_WORKSPACE/shasoc
        git apply $GITHUB_WORKSPACE/action/KernelSU.patch
    - name: Setup KernelSU
      run: |
        cd $GITHUB_WORKSPACE/shasoc
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
    - name: Generate kernel configuration
      run: |
        cd $GITHUB_WORKSPACE/shasoc
        export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
        export KBUILD_COMPILER_STRING="$(clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"
        export KBUILD_BUILD_HOST="Sunshine"
        export KBUILD_BUILD_USER="Melamit"
        make -j$(nproc --all) O=out ARCH=arm64 CC=clang merlin_defconfig
    - name: Build kernel from sources
      run: |
        cd $GITHUB_WORKSPACE/shasoc
        export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
        export KBUILD_COMPILER_STRING="$(clang --version | head -n 1 | perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g' -e 's/[[:space:]]*$//')"
        export KBUILD_BUILD_HOST="Sunshine"
        export KBUILD_BUILD_USER="Melamit"
        make -j$(nproc --all) O=out ARCH=arm64 savedefconfig
        cp -f out/defconfig arch/arm64/configs/merlin_defconfig
        make -j$(nproc --all) O=out ARCH=arm64 CC=clang CROSS_COMPILE=aarch64-linux-gnu- CC=clang READELF=llvm-readelf OBJCOPY=llvm-objcopy AS=llvm-as LD=ld.lld NM=llvm-nm OBJDUMP=llvm-objdump STRIP=llvm-strip CROSS_COMPILE_ARM32=arm-linux-gnueabi-
    - name: Check a kernel output files
      run: |
        cd $GITHUB_WORKSPACE/shasoc
        if [ -f out/arch/arm64/boot/Image.gz-dtb ]; then
          echo "KERNEL=true" >> $GITHUB_ENV
        else
          echo "Kernel image is empty"
        fi
        if [ -f out/arch/arm64/boot/dtbo.img ]; then
          echo "DTBO=true" >> $GITHUB_ENV
        else
          echo "DTBO image is empty"
        fi
    - name: Package into flashable zip
      run: |
        cd $GITHUB_WORKSPACE/
        git clone https://github.com/osm0sis/AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
        sed -i "s/kernel.string=ShasOC kernel by @shas45558 @ xda-developers/kernel.string=ShasOC build by @melamitdesign;/g" AnyKernel3/anykernel.sh
        if [ ${{ env.KERNEL }} = true ]; then
            cp out/arch/shasoc/boot/Image.gz-dtb AnyKernel3/
        elif [ ${{ env.DTBO }} = true ]; then
            cp out/arch/arm64/boot/dtbo.img AnyKernel3/
        fi
        rm -rf AnyKernel3/.git* AnyKernel3/README.md
    